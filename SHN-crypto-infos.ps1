<#
    .NOTES
    --------------------------------------------------------------------------------
    Code generated by:  Hands
    Generated on:       03/02/2018
    Generated by:       Guillaume Mateos
    Organization:       Shell-Networks.fr
    --------------------------------------------------------------------------------
    .SYNOPSIS
    Dashboard to monitor cryptocurrencies values on bitstamp
    .DESCRIPTION
    This Dashboard is refreshed automatically every 10 seconds
#>

#Synchronized hashtable to share variables between different runspaces, this variable is "Thread safe"
$SyncHashTable = [hashtable]::Synchronized(@{}) 

### Determine relative scriptpath ###
if ($MyInvocation.MyCommand.CommandType -eq "ExternalScript") #the script/executable path independant of compiled (.Exe) /not compiled with the following code (Avoid usage of PSSCRIPTROOT)
{ $ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition }
else
{ $ScriptPath = Split-Path -Parent -Path ([Environment]::GetCommandLineArgs()[0]) }

$SyncHashTable.ScriptPath = $ScriptPath #We put the relative scriptpath in the shared Hashtable to access it later within our runspaces

### Creation of a runspace for the entire application
$Exist = Get-Runspace | ?{$_.Name -like "AppRunspace_SHN-Crypto-infos"} #First of all we check if the runspace already exit
if($Exist) 
{
    $Exist | %{$_.Close(); $_.Dispose()} #Runspace cleaning
}
$AppRunspace = [runspacefactory]::CreateRunspace()
$AppRunspace.Name = "AppRunspace_SHN-Crypto-infos"
$AppRunspace.ApartmentState = "STA" #Single Thread Apartment mode
$AppRunspace.ThreadOptions = "ReuseThread"
$AppRunspace.Open()
$AppRunspace.SessionStateProxy.SetVariable("SyncHashTable",$SyncHashTable) #We pass the synchronized hastable as a variable to the runspace

### Functions that we will reuse are placed there in a variable ###
$Functions = {

   Function Initialize-Infos
   {
    <#
    .SYNOPSIS
    Initialize and refresh all infos on the form
    .DESCRIPTION
    Initialize and refresh all infos on the form, fill all the labels with crypto infos
    .PARAMETER RunSpaceName
    Name that will be given to the runspace dedicated to this function
    .PARAMETER monitor
    Use this switch to activate monitor mode
    .PARAMETER TimeRefresh
    Time in second between each query
    .EXAMPLE
    Initialize-NetworkInfos -monitor -TimeRefresh 5
    .EXAMPLE
    Initialize-NetworkInfos
    #>

    [Cmdletbinding()]
    Param(
        [Parameter(Mandatory = $False,Position = 0)]
        [String]$RunSpaceName = "CryptoRunSpace",
        [Parameter(Mandatory = $False,Position = 1)]
        [switch]$monitor,
        [Parameter(Mandatory = $False,Position = 2)]
        [int]$TimeRefresh = 10      
    )
        
        $Exist = Get-Runspace | ?{$_.Name -like $RunSpaceName} #First of all we check if the runspace already exist
        if($Exist) 
        {
            $Exist | %{$_.Close(); $_.Dispose()} #Runspace Cleaning
        }

        $CryptoRunspace = [runspacefactory]::CreateRunspace() #Creation of a dedicated Runspace for crypto querys
        $CryptoRunspace.Name = "$($RunSpaceName)"
        $CryptoRunspace.ApartmentState = "STA" #STA = Single Thread Agent, Make the new Runspace single threaded
        $CryptoRunspace.ThreadOptions = "ReuseThread"
        $CryptoRunspace.Open() #We open the runspace
        $CryptoRunspace.SessionStateProxy.SetVariable("SyncHashTable",$SyncHashTable) #We pass variables we want to share with this runspace
        $CryptoRunspace.SessionStateProxy.SetVariable("BTCLastLabel",$BTCLastLabel) # Here we share all labels of the UI
        $CryptoRunspace.SessionStateProxy.SetVariable("BTCHighLabel",$BTCHighLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("BTCLowLabel",$BTCLowLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("BTCBidLabel",$BTCBidLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("BTCAskLabel",$BTCAskLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("ETHLastLabel",$ETHLastLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("ETHHighLabel",$ETHHighLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("ETHLowLabel",$ETHLowLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("ETHBidLabel",$ETHBidLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("ETHAskLabel",$ETHAskLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("XRPLastLabel",$XRPLastLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("XRPHighLabel",$XRPHighLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("XRPLowLabel",$XRPLowLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("XRPBidLabel",$XRPBidLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("XRPAskLabel",$XRPAskLabel)
        $CryptoRunspace.SessionStateProxy.SetVariable("TBLogs",$TBLogs) #We pass the Textbox to this runspace
        $CryptoRunspace.SessionStateProxy.SetVariable("ScrollLogs",$ScrollLogs) #We pass the Scrollviewer to this runspace
        $CryptoRunspace.SessionStateProxy.SetVariable("monitor",$monitor) #We pass the Switch to this runspace
        $CryptoRunspace.SessionStateProxy.SetVariable("TimeRefresh",$TimeRefresh) #We pass the timer to this runspace

    $code = { #here we declare the code we want to run in the runspace for crypto querys

        ### Custom Functions needed by the runspace ###
        Function Get-Coin-Infos
        {
            <#
                .SYNOPSIS
                Use this to query infos on a given cryptocurrencie
                .DESCRIPTION
                Use this to query infos on a given cryptocurrencie
                .PARAMETER Coin
                Coin for wich you want to query infos
                .PARAMETER BitstampURL
                REST API URL of the Bitstamp website
                .EXAMPLE

                Get-Coin-Infos -Coin ETH

                high      : 800.00
                last      : 776.95
                timestamp : 1517672771
                bid       : 776.95
                vwap      : 741.28
                volume    : 25950.04889615
                low       : 671.00
                ask       : 777.00
                open      : 733.71

            #>
            [Cmdletbinding()]
            Param (
            [Parameter(Mandatory = $True,Position = 0)]
            [ValidateSet("BTC", "ETH", "XRP")]
            [String]$Coin,
            [Parameter(Mandatory = $False,Position = 1)]
            [String]$BitstampURL = "https://www.bitstamp.net/api/v2/ticker/"
            )
   
          switch($Coin) #We define the url depending of the coin we want to query
          {
            BTC
            {
                $CoinURL = $BitstampURL+"btceur"
            }

            ETH
            {
                $CoinURL = $BitstampURL+"etheur"
            }

            XRP
            {
                $CoinURL = $BitstampURL+"xrpeur"
            }
          }

          try
          {
             $CoinInfos = [pscustomobject](invoke-restmethod -Uri $CoinURL)
          }
          catch
          {
            Write-Verbose "Error querying API at URL : $($CoinURL)"
            Write-host -ForegroundColor Red $($_.Exception.Message)

            return $false
          }
      
          Return $CoinInfos        
       }

        Function Get-Coins-Infos
        {
            <#
            .SYNOPSIS
            Use this to query infos on multiple cryptocurrencies
            .DESCRIPTION
            Use this to query infos on multiple cryptocurrencies, will return an object containing all the values
            .EXAMPLE
            Get-Coins-Infos

            Name                           Value                                                                                                                                                          
            ----                           -----                                                                                                                                                          
            XRP                            @{high=0.82000; last=0.77301; timestamp=1517683572; bid=0.77074; vwap=0.72806; volume=22217141.26811867; low=0.62000; ask=0.77266; open=0.71440}               
            BTC                            @{high=7588.44; last=7445.54; timestamp=1517683571; bid=7429.31; vwap=7089.01; volume=4212.15024394; low=6528.00; ask=7445.54; open=7075.23}                   
            ETH                            @{high=800.00; last=780.05; timestamp=1517683572; bid=780.05; vwap=742.98; volume=20568.19919087; low=671.00; ask=783.38; open=733.71}                         

            #>

            [Cmdletbinding()]
            Param (
            )
    
            $Coins = @{
            BTC = (Get-Coin-Infos -Coin BTC)
            ETH = (Get-Coin-Infos -Coin ETH)
            XRP = (Get-Coin-Infos -Coin XRP)        
            }

            Return $Coins
        }

        ### Function Initialize-Infos Itself ###

        if($monitor) #If we choose monitoring mode
        {
            $SyncHashTable.Monitoring = $True #We put the Monitoring value in the shared Hashtable to access it later within our runspaces

            $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
                [action]{
                                     
                        $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                        $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                        $Text.Foreground = "Green" #Setting Color of text
                        $Text.Text = "{0}`r" -f "$($TimeStamp) => STARTING CRYPTO MONITOR" #Setting text value

                        $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                        $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview             
                }          
                )

            while($SyncHashTable.Monitoring) #Infinite loop for the monitoring mode
            {
             
                $Crypto_query = $true #initialisation of a boolean 

                try
                {
                    $Infos = Get-Coins-Infos #We query infos on our favorite coins
                }
                catch
                {
                    $Crypto_query = $false
                }
        
                if($Crypto_query) #If success query crypto values
                {       
                    $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
                        [action]{
                                     
                                $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                                $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                                $Text.Foreground = "Blue" #Setting Color of text
                                $Text.Text = "{0}`r" -f "$($TimeStamp) => Updating crypto infos" #Setting text value

                                $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                                $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview

                                $BTCLastLabel.Content = "LAST : $($Infos.BTC.Last)"
                                $BTCHighLabel.Content = "High : $($Infos.BTC.High)"
                                $BTCLowLabel.Content = "Low : $($Infos.BTC.Low)"
                                $BTCBidLabel.Content = "Bid : $($Infos.BTC.Bid)"
                                $BTCAskLabel.Content = "Ask : $($Infos.BTC.Ask)"

                                $ETHLastLabel.Content = "LAST : $($Infos.ETH.last)"
                                $ETHHighLabel.Content = "High : $($Infos.ETH.High)"
                                $ETHLowLabel.Content = "Low : $($Infos.ETH.Low)"
                                $ETHBidLabel.Content = "Bid : $($Infos.ETH.Bid)"
                                $ETHAskLabel.Content = "Ask : $($Infos.ETH.Ask)"

                                $XRPLastLabel.Content = "LAST : $($Infos.XRP.last)"
                                $XRPHighLabel.Content = "High : $($Infos.XRP.High)"
                                $XRPLowLabel.Content = "Low : $($Infos.XRP.Low)"
                                $XRPBidLabel.Content = "Bid : $($Infos.XRP.Bid)"
                                $XRPAskLabel.Content = "Ask : $($Infos.XRP.Ask)"                
                        }          
                        )
                   }
                   else #Else it means error
                   {
                     $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
                        [action]{
                                     
                                $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                                $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                                $Text.Foreground = "Red" #Setting Color of text
                                $Text.Text = "{0}`r" -f "$($TimeStamp) => Error updating crypto infos" #Setting text value

                                $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                                $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview
                                }
                        )
                   }            
                   
                    Start-Sleep -Seconds $TimeRefresh #Here is the timer between each query
            }
        }
        else #Else this is a one shot mode
        {
            $Crypto_query = $true #initialisation of a boolean 

            try
            {
                $Infos = Get-Coins-Infos #We query infos on our favorite coins
            }
            catch
            {
                $Crypto_query = $false
            }
        
            if($Crypto_query) #If success query crypto values
            {       
                $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
                    [action]{
                                     
                            $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                            $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                            $Text.Foreground = "Blue" #Setting Color of text
                            $Text.Text = "{0}`r" -f "$($TimeStamp) => Updating crypto infos" #Setting text value

                            $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                            $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview

                            $BTCLastLabel.Content = "LAST : $($Infos.BTC.Last)"
                            $BTCHighLabel.Content = "High : $($Infos.BTC.High)"
                            $BTCLowLabel.Content = "Low : $($Infos.BTC.Low)"
                            $BTCBidLabel.Content = "Bid : $($Infos.BTC.Bid)"
                            $BTCAskLabel.Content = "Ask : $($Infos.BTC.Ask)"

                            $ETHLastLabel.Content = "LAST : $($Infos.ETH.last)"
                            $ETHHighLabel.Content = "High : $($Infos.ETH.High)"
                            $ETHLowLabel.Content = "Low : $($Infos.ETH.Low)"
                            $ETHBidLabel.Content = "Bid : $($Infos.ETH.Bid)"
                            $ETHAskLabel.Content = "Ask : $($Infos.ETH.Ask)"

                            $XRPLastLabel.Content = "LAST : $($Infos.XRP.last)"
                            $XRPHighLabel.Content = "High : $($Infos.XRP.High)"
                            $XRPLowLabel.Content = "Low : $($Infos.XRP.Low)"
                            $XRPBidLabel.Content = "Bid : $($Infos.XRP.Bid)"
                            $XRPAskLabel.Content = "Ask : $($Infos.XRP.Ask)"                
                    }          
                    )
               }
               else #Else it means error
               {
                 $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
                    [action]{
                                     
                            $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                            $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                            $Text.Foreground = "Red" #Setting Color of text
                            $Text.Text = "{0}`r" -f "$($TimeStamp) => Error updating crypto infos" #Setting text value

                            $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                            $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview
                            }
                    )
               }            
        }               
    }

    $PSinstance = [powershell]::Create().AddScript($Code) #We pass the code in a new powershell instance
    $PSinstance.Runspace = $CryptoRunspace #The run space of this new powershell instance is the runspace we created earlier
    $Job = $PSinstance.BeginInvoke() #Invocation of the code 
    $PSinstance.EndInvoke()
   }

}

#Application Code for entire application that will be launched inside a runspace, we define it into a variable
$Code = {

    ### Variables ###
    $Author = 'Guillaume M.'
    $AppName = 'SHN-Crypto-infos'
    $Version = 'V 1.0'
    $RealeaseDate = 'Februar 2018'
    $UserInterface = "$($SyncHashTable.ScriptPath)\ressources\GUI_Mahapps.xaml" #File where we define UI
       
    #Add Assemblys for Windows Presentation Foundation and mahapps to apply Metro theme
    [void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
    [void][System.Reflection.Assembly]::LoadFrom("$($SyncHashTable.ScriptPath)\lib\MahApps.Metro.dll")
    [void][System.Reflection.Assembly]::LoadFrom("$($SyncHashTable.ScriptPath)\lib\System.Windows.Interactivity.dll")

    ### Functions ###
    function Loadxml
    {
        <#
            .SYNOPSIS
            Use this to load the content of xml or xaml file
            .DESCRIPTION
            Use this to load the content of xml or xaml file
            .PARAMETER filename
            File from wich you want to load xml or xaml
            .EXAMPLE
        #>
        [Cmdletbinding()]
        Param (
        [Parameter(Mandatory = $True,Position = 0)]
        [String]$filename
        )

        $XamlLoader = (New-Object System.Xml.XmlDocument)
        $XamlLoader.Load($filename)
        return $XamlLoader   
    }

   Function Stop-Crypto-Monitor
   {
    <#
        .SYNOPSIS
        Stop the monitoring of cryptocurrencies
        .DESCRIPTION
        Stop the monitoring of cryptocurrencies
        .EXAMPLE
        Stop-Crypto-Monitor    
    #>

    [Cmdletbinding()]
    Param( 
    )

        $SyncHashTable.Monitoring = $False #We put the Monitoring value in the shared Hashtable to access it later within our runspaces

        $SyncHashTable.Window.Dispatcher.invoke( #We invoke actions on the UI wich is in the shared Hashtable
        [action]{
                                     
                $TimeStamp = Get-Date -Format yyyyMMdd-HH:mm:ss #creation of a timestamp to date actions

                $Text = New-Object System.Windows.Documents.Run #New object to Write inside the textblock
                $Text.Foreground = "Red" #Setting Color of text
                $Text.Text = "{0}`r" -f "$($TimeStamp) => STOP CRYPTO MONITOR" #Setting text value

                $TBLogs.Inlines.Add($Text) #Adding line with text in the textblock
                $ScrollLogs.scrolltoend()  #Scroll to the end of scrollview             
        }          
        )
   }

    ### UI declaration ###
    $XAML = Loadxml($UserInterface)
    $reader=(New-Object System.Xml.XmlNodeReader $XAML)

    $SyncHashTable.Form=[Windows.Markup.XamlReader]::Load($reader) #Here the UI is going to be declared in the shared hashtable, to allow it to be manipulated by other runspaces
    $SyncHashTable.Window = $SyncHashTable.Form.FindName("Window")
    $SyncHashTable.Window.Title = $AppName
    
    #Labels
    $VersionLabel = $SyncHashTable.Form.FindName("Version")
    $VersionLabel.Content = $Version
    $DateLabel = $SyncHashTable.Form.FindName("Date")
    $DateLabel.Content = $RealeaseDate
    $AuthorLabel = $SyncHashTable.Form.FindName("Author")
    $AuthorLabel.Content = $Author

    $BTCLastLabel = $SyncHashTable.Form.FindName("BTCLastLabel")
    $BTCHighLabel = $SyncHashTable.Form.FindName("BTCHighLabel")
    $BTCLowLabel = $SyncHashTable.Form.FindName("BTCLowLabel")
    $BTCBidLabel = $SyncHashTable.Form.FindName("BTCBidLabel")
    $BTCAskLabel = $SyncHashTable.Form.FindName("BTCAskLabel")

    $ETHLastLabel = $SyncHashTable.Form.FindName("ETHLastLabel")
    $ETHHighLabel = $SyncHashTable.Form.FindName("ETHHighLabel")
    $ETHLowLabel = $SyncHashTable.Form.FindName("ETHLowLabel")
    $ETHBidLabel = $SyncHashTable.Form.FindName("ETHBidLabel")
    $ETHAskLabel = $SyncHashTable.Form.FindName("ETHAskLabel")

    $XRPLastLabel = $SyncHashTable.Form.FindName("XRPLastLabel")
    $XRPHighLabel = $SyncHashTable.Form.FindName("XRPHighLabel")
    $XRPLowLabel = $SyncHashTable.Form.FindName("XRPLowLabel")
    $XRPBidLabel = $SyncHashTable.Form.FindName("XRPBidLabel")
    $XRPAskLabel = $SyncHashTable.Form.FindName("XRPAskLabel")

    #Buttons
    $ABoutButton = $SyncHashTable.Form.FindName("ABoutButton")
    $FlyOutAbout = $SyncHashTable.Form.FindName("FlyOutAbout")
    $RefreshButton = $SyncHashTable.Form.FindName("RefreshButton")
    $StartButton = $SyncHashTable.Form.FindName("StartButton")
    $StopButton = $SyncHashTable.Form.FindName("StopButton")

    #TextBlock
    $TBLogs = $SyncHashTable.Form.FindName("TBLogs")

    #ScrollViewer
    $ScrollLogs = $SyncHashTable.Form.FindName("ScrollLogs")

    ### Actions on UI ###
    $SyncHashTable.Window.Add_Loaded({ #On Load of the Main form
        
            Initialize-Infos

            $StopButton.IsEnabled = $False #We deactivate the stop monitoring button
    })

    $ABoutButton.Add_Click({ #Click on the About button shows the flyout
        
        $FlyOutAbout.IsOpen = $true
    })

    $StartButton.Add_Click({ #Click on the Refresh Button, to query crypto values as a monitoring mode

        Initialize-Infos -monitor

        $StartButton.IsEnabled = $False #We deactivate the button
        $StopButton.IsEnabled = $True #We activate the stop monitoring button
    })

    $StopButton.Add_Click({ #Click on the Refresh Button, to stop monitoring crypto values

        Stop-Crypto-Monitor

        $StopButton.IsEnabled = $False #We deactivate the stop monitoring button
        $StartButton.IsEnabled = $True #We activate the button
    })

    $RefreshButton.Add_Click({ #Click on the Refresh Button, to query crypto values in a one shot mode

        Initialize-Infos
    })

    $SyncHashTable.Form.ShowDialog() #| out-null    #We show the UI
    
    Get-Process "*SHN-Crypto-infos*" | stop-process #This is going to properly kill the process at exit when the script is going to be wrapped inside an exe, and the window will be closed
}

$AppCode = [ScriptBlock]::Create($Functions.ToString() + $Code.ToString()) #We concatenate two scripts blocks - this will avoid us to rewrite douzen of times the same functions that will be used in runspaces

$AppPSinstance = [powershell]::Create().AddScript($AppCode) #We pass the Code of the App in a new powershell instance
$AppPSinstance.Runspace = $AppRunspace #We passe attribute the powershell instance to this runspace

$AppJob = $AppPSinstance.BeginInvoke() #Let's invoke the App !! (Materia Chocobo + Materia rouge = Master invocation)